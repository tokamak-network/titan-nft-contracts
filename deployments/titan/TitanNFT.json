{
  "address": "0x63D03a5AA8c070f5D3a4342bcCF4816b5F709e2b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "attribute",
          "type": "bytes"
        }
      ],
      "name": "SetAttribute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_ERC721_RECEIVED",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_INTERFACE_ID_ERC721",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_INTERFACE_ID_ERC721_ENUMERABLE",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_INTERFACE_ID_ERC721_METADATA",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_allTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_allTokensIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_operatorApprovals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ownedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_ownedTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ownedTokensIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenApprovals",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenAttributes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "attribute",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "attributes",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "multiMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_attribute",
          "type": "bytes"
        }
      ],
      "name": "setAttribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_attributes",
          "type": "bytes[]"
        }
      ],
      "name": "setAttributes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_tokenURIs",
          "type": "string[]"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4670639ba55666ae3e01242c75ad3d7353d0e2e0c86ba3c372a8e7ccc289e8cf",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x796C1f28c777b8a5851D356EBbc9DeC2ee51137F",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2867721",
    "logsBloom": "0x
    "blockHash": "0x87c5b02c1b6e1a237075400739b7c31b31cb9cbdeb41019186e37601bf591fa9",
    "transactionHash": "0x4670639ba55666ae3e01242c75ad3d7353d0e2e0c86ba3c372a8e7ccc289e8cf",
    "logs": [],
    "blockNumber": 730,
    "cumulativeGasUsed": "2867721",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Titan NFTs",
    "TITAN",
    "0x796C1f28c777b8a5851D356EBbc9DeC2ee51137F",
    "100"
  ],
  "numDeployments": 1,
  "solcInputHash": "05a775a899d7c9542c69905f1fe1629f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"attribute\",\"type\":\"bytes\"}],\"name\":\"SetAttribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_ERC721_RECEIVED\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_INTERFACE_ID_ERC721\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_INTERFACE_ID_ERC721_ENUMERABLE\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_INTERFACE_ID_ERC721_METADATA\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_allTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_allTokensIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_operatorApprovals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ownedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_ownedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ownedTokensIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenApprovals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenAttributes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"attribute\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"attributes\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"multiMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_attribute\",\"type\":\"bytes\"}],\"name\":\"setAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_attributes\",\"type\":\"bytes[]\"}],\"name\":\"setAttributes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_tokenURIs\",\"type\":\"string[]\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"see https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isOwner(address)\":{\"details\":\"Returns the address of the current owner.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"Overrides supportsInterface\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"ERC721 Non-Fungible Token Standard basic implementation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TitanNFT.sol\":\"TitanNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ERC165P.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./interfaces/IIERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165P is IIERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) internal _supportedInterfaces;\\n\\n    constructor () {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\",\"keccak256\":\"0xcf0e96855f74878985c16c8b0422c7f3ea3b7c5ec14ad15307da27b1878bd195\",\"license\":\"MIT\"},\"contracts/ProxyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract ProxyBase {\\n    // bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1))\\n    bytes32 internal constant IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /// @dev Sets the implementation address of the proxy.\\n    /// @param newImplementation Address of the new implementation.\\n    function _setImplementation(address newImplementation) internal {\\n        require(\\n            Address.isContract(newImplementation),\\n            \\\"ProxyBase: Cannot set a proxy implementation to a non-contract address\\\"\\n        );\\n\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n\\n    function _implementation() internal view returns (address impl) {\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x357677d12faf0e7422336b6a243bd81bf692728c28c5b28eb2f9fd873a5d4f66\",\"license\":\"MIT\"},\"contracts/TitanNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./TitanNFTStorage.sol\\\";\\nimport \\\"./ProxyBase.sol\\\";\\n\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract TitanNFT is ProxyBase, TitanNFTStorage, IERC721, IERC721Metadata, IERC721Enumerable {\\n    // using SafeMath for uint256;\\n    using Address for address;\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    event SetAttribute(uint256 tokenId, bytes attribute);\\n\\n    constructor (string memory name_, string memory symbol_, address ownerAddress, uint256 _maxId) {\\n        _owner = ownerAddress;\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n        maxId = _maxId;\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) public onlyOwner ifFree virtual {\\n       _setTokenURI(tokenId, _tokenURI);\\n    }\\n\\n    function setTokenURI(uint256[] memory tokenIds, string[] memory _tokenURIs) public onlyOwner ifFree virtual {\\n        require(tokenIds.length != 0 && tokenIds.length == _tokenURIs.length, \\\"wrong length\\\");\\n        for(uint256 i = 0; i < tokenIds.length; i++){\\n            _setTokenURI(tokenIds[i], _tokenURIs[i]);\\n        }\\n    }\\n\\n    function setAttribute(uint256 tokenId, bytes memory _attribute) public onlyOwner ifFree virtual {\\n       _setAttribute(tokenId, _attribute);\\n    }\\n\\n    function setAttributes(uint256[] memory tokenIds, bytes[] memory _attributes) public onlyOwner ifFree virtual {\\n        require(tokenIds.length != 0 && tokenIds.length == _attributes.length, \\\"wrong length\\\");\\n        for(uint256 i = 0; i < tokenIds.length; i++){\\n            _setAttribute(tokenIds[i], _attributes[i]);\\n        }\\n    }\\n\\n    /*** External ***/\\n\\n    function mint(uint256 tokenId, bytes memory attribute, address to) external onlyOwner ifFree {\\n        require(tokenId <= maxId, \\\"not allowed tokenId\\\");\\n        _safeMint(to, tokenId);\\n        _tokenAttributes[tokenId] = attribute;\\n        emit SetAttribute(tokenId, attribute);\\n    }\\n\\n    function multiMint(uint256[] memory tokenIds, bytes[] memory attributes, address to) external onlyOwner ifFree {\\n        require(tokenIds.length != 0 && tokenIds.length == attributes.length, \\\"wrong length\\\");\\n        for(uint256 i = 0; i < tokenIds.length; i++){\\n            require(tokenIds[i] <= maxId, \\\"not allowed tokenId\\\");\\n            _safeMint(to, tokenIds[i]);\\n            _tokenAttributes[tokenIds[i]] = attributes[i];\\n            emit SetAttribute(tokenIds[i], attributes[i]);\\n        }\\n    }\\n\\n    /*** Public ***/\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner_ = ownerOf(tokenId);\\n        require(to != owner_, \\\"TitanNFT: approval to current owner\\\");\\n\\n        require(msg.sender == owner_ || isApprovedForAll(owner_, msg.sender),\\n            \\\"TitanNFT: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != msg.sender, \\\"TitanNFT: approve to caller\\\");\\n\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"TitanNFT: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"TitanNFT: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /*** View ***/\\n\\n    /**\\n     * @dev Overrides supportsInterface\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165P) returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function isOwner(address addr) public view virtual returns (bool) {\\n\\n        if(_owner == addr) return true;\\n        else return false;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    /*function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n    */\\n    function balanceOf(address owner_) public view override returns (uint256) {\\n        require(owner_ != address(0), \\\"TitanNFT: balance query for the zero address\\\");\\n\\n        return _ownedTokensCount[owner_].current();\\n    }\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    /*function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n    */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        address owner_ = _tokenOwner[tokenId];\\n        require(owner_ != address(0), \\\"TitanNFT: owner query for nonexistent token\\\");\\n\\n        return owner_;\\n    }\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"TitanNFT: nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner_, uint256 index) public view override returns (uint256) {\\n        require(index < balanceOf(owner_), \\\"TitanNFT: owner index out of bounds\\\");\\n        return _ownedTokens[owner_][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    /*function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = tokenOwners().at(index);\\n        return tokenId;\\n    }*/\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        require(index < totalSupply(), \\\"TitanNFT: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    function allTokens() public view returns (uint256[] memory) {\\n        return _allTokens;\\n    }\\n\\n    function tokensOfOwner(address owner_) public view returns (uint256[] memory) {\\n        return _ownedTokens[owner_];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"TitanNFT: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner_, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner_][operator];\\n    }\\n\\n    /*** internal ***/\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"TitanNFT: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    /*function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return tokenOwners().contains(tokenId);\\n    }*/\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        address owner_ = _tokenOwner[tokenId];\\n        return owner_ != address(0);\\n    }\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"TitanNFT: operator query for nonexistent token\\\");\\n        address owner_ = ownerOf(tokenId);\\n        return (spender == owner_ || getApproved(tokenId) == spender || isApprovedForAll(owner_, spender));\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(address owner_, uint256 tokenId) internal virtual{\\n        require(ownerOf(tokenId) == owner_, \\\"TitanNFT: burn of token that is not own\\\");\\n        _beforeTokenTransfer(owner_, address(0), tokenId);\\n        _clearApproval(tokenId);\\n\\n        _ownedTokensCount[owner_].decrement();\\n        _tokenOwner[tokenId] = address(0);\\n\\n        emit Transfer(owner_, address(0), tokenId);\\n    }\\n\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n\\n        _addTokenToAllTokensEnumeration(tokenId);\\n\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"TitanNFT: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"TitanNFT: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"TitanNFT: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _tokenOwner[tokenId] = to;\\n        _ownedTokensCount[to].increment();\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the _ownedTokensIndex mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _ownedTokens[from].length-1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        //_ownedTokens[from].length--;\\n        _ownedTokens[from].pop();\\n\\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\\n        // lastTokenId, or just over the end of the array if the token was the last one).\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length-1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        //_allTokens.length--;\\n        _allTokens.pop();\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n\\n    /**\\n     * @dev Private function to clear current approval of a given token ID.\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function _clearApproval(uint256 tokenId) private {\\n        if (_tokenApprovals[tokenId] != address(0)) {\\n            _tokenApprovals[tokenId] = address(0);\\n        }\\n    }\\n\\n     /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        require(ownerOf(tokenId) == from, \\\"ProjectToken: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ProjectToken: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        _clearApproval(tokenId);\\n\\n        _ownedTokensCount[from].decrement();\\n        _ownedTokensCount[to].increment();\\n\\n        _tokenOwner[tokenId] = to;\\n\\n        _removeTokenFromOwnerEnumeration(from, tokenId);\\n\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"TitanNFT: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    function _setAttribute(uint256 tokenId, bytes memory _attribute) internal virtual {\\n        require(_exists(tokenId), \\\"TitanNFT: URI set of nonexistent token\\\");\\n        _tokenAttributes[tokenId] = _attribute;\\n        emit SetAttribute(tokenId, _attribute);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    function setBaseURI(string memory baseURI_) public onlyOwner virtual {\\n       _setBaseURI(baseURI_);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            msg.sender,\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"TitanNFT: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {\\n\\n    }\\n}\\n\",\"keccak256\":\"0x31903cee41a0a29cf4e7d5583a1b105d92b87093ae54eb75d05416e3030b46f4\",\"license\":\"MIT\"},\"contracts/TitanNFTStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ERC165P.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract TitanNFTStorage is ERC165P {\\n    using Counters for Counters.Counter;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 public constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    address public _owner;\\n\\n    // Token name\\n    string public _name;\\n\\n    // Token symbol\\n    string public _symbol;\\n\\n    uint256 public maxId;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) public _tokenURIs;\\n\\n    // attributes\\n    mapping (uint256 => bytes) public _tokenAttributes;\\n\\n    // Base URI\\n    string public _baseURI;\\n\\n    // Mapping from token ID to owner\\n    mapping (uint256 => address) public _tokenOwner;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) public _tokenApprovals;\\n\\n    // Mapping from owner to number of owned token\\n    mapping (address => Counters.Counter) public _ownedTokensCount;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) public _operatorApprovals;\\n\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => uint256[]) public _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) public _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] public _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) public _allTokensIndex;\\n\\n    bool internal _lock;\\n    bool public pauseProxy;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 public constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 public constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 public constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier ifFree {\\n        require(_lock != true, \\\"in use\\\");\\n        _lock = true;\\n        _;\\n        _lock = false;\\n    }\\n}\\n\",\"keccak256\":\"0x30e9e532623907394b3b59517564d5f680814365fbb1ccadc8c4912003b4a1c5\",\"license\":\"MIT\"},\"contracts/interfaces/IIERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IIERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x909bdc2f1c48c72997c2d1ad227701a6d46157345692f3486673e591f698c476\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620032f8380380620032f88339810160408190526200003491620002c9565b620000466301ffc9a760e01b620000d2565b600180546001600160a01b0319166001600160a01b03841617905583516200007690600290602087019062000156565b5082516200008c90600390602086019062000156565b506004819055620000a46380ac58cd60e01b620000d2565b620000b6635b5e139f60e01b620000d2565b620000c863780e9d6360e01b620000d2565b5050505062000399565b6001600160e01b03198082161415620001315760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640160405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b82805462000164906200035c565b90600052602060002090601f016020900481019282620001885760008555620001d3565b82601f10620001a357805160ff1916838001178555620001d3565b82800160010185558215620001d3579182015b82811115620001d3578251825591602001919060010190620001b6565b50620001e1929150620001e5565b5090565b5b80821115620001e15760008155600101620001e6565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200022457600080fd5b81516001600160401b0380821115620002415762000241620001fc565b604051601f8301601f19908116603f011681019082821181831017156200026c576200026c620001fc565b816040528381526020925086838588010111156200028957600080fd5b600091505b83821015620002ad57858201830151818301840152908201906200028e565b83821115620002bf5760008385830101525b9695505050505050565b60008060008060808587031215620002e057600080fd5b84516001600160401b0380821115620002f857600080fd5b620003068883890162000212565b955060208701519150808211156200031d57600080fd5b506200032c8782880162000212565b604087015190945090506001600160a01b03811681146200034c57600080fd5b6060959095015193969295505050565b600181811c908216806200037157607f821691505b602082108114156200039357634e487b7160e01b600052602260045260246000fd5b50919050565b612f4f80620003a96000396000f3fe608060405234801561001057600080fd5b50600436106103205760003560e01c806388290adc116101a7578063b01ac591116100ee578063d28d885211610097578063edc3bc3f11610071578063edc3bc3f146106f8578063f47c387814610726578063f66317181461073957600080fd5b8063d28d8852146106a6578063dece6854146106ae578063e985e9c5146106bc57600080fd5b8063b88d4fde116100c8578063b88d4fde14610677578063c5ea3c651461068a578063c87b56dd1461069357600080fd5b8063b01ac5911461064e578063b09f12661461065c578063b2bdfa7b1461066457600080fd5b8063a22cb46511610150578063a7cc01361161012a578063a7cc0136146105ff578063aa5965ae14610628578063aafb2d441461063b57600080fd5b8063a22cb465146105ac578063a2e9b439146105bf578063a7263665146105df57600080fd5b806394a509dd1161018157806394a509dd1461058357806395d89b41146105915780639be10b961461059957600080fd5b806388290adc14610538578063897f41521461055f5780638da5cb5b1461057257600080fd5b80634a1dbdc01161026b5780636c0360eb11610214578063743976a0116101ee578063743976a0146104f4578063796db312146104fc5780638462151c1461052557600080fd5b80636c0360eb146104c45780636ff97f1d146104cc57806370a08231146104e157600080fd5b806355f804b31161024557806355f804b31461048c5780636352211e1461049f57806363a8fd89146104b257600080fd5b80634a1dbdc0146104535780634f3c5f06146104665780634f6ccce71461047957600080fd5b806317a3a79c116102cd5780632f54bf6e116102a75780632f54bf6e1461041a5780632f745c591461042d57806342842e0e1461044057600080fd5b806317a3a79c146103e257806318160ddd146103f557806323b872dd1461040757600080fd5b8063095ea7b3116102fe578063095ea7b3146103a75780630bb78ec1146103bc578063162094c4146103cf57600080fd5b806301ffc9a71461032557806306fdde0314610367578063081812fc1461037c575b600080fd5b610352610333366004612723565b6001600160e01b03191660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b61036f610759565b60405161035e919061279f565b61038f61038a3660046127b2565b6107eb565b6040516001600160a01b03909116815260200161035e565b6103ba6103b53660046127e2565b610887565b005b61036f6103ca3660046127b2565b6109bd565b6103ba6103dd3660046128c3565b610a57565b61036f6103f03660046127b2565b610b11565b600e545b60405190815260200161035e565b6103ba61041536600461290a565b610b2a565b610352610428366004612946565b610ba7565b6103f961043b3660046127e2565b610bd5565b6103ba61044e36600461290a565b610c77565b6103ba610461366004612a70565b610c92565b6103f96104743660046127e2565b610de9565b6103f96104873660046127b2565b610e1a565b6103ba61049a366004612aca565b610ea4565b61038f6104ad3660046127b2565b610f04565b60105461035290610100900460ff1681565b61036f610f95565b6104d4610fa4565b60405161035e9190612aff565b6103f96104ef366004612946565b610ffb565b61036f611097565b61038f61050a3660046127b2565b6008602052600090815260409020546001600160a01b031681565b6104d4610533366004612946565b6110a4565b610546630a85bd0160e11b81565b6040516001600160e01b0319909116815260200161035e565b6103ba61056d366004612b43565b611110565b6001546001600160a01b031661038f565b610546635b5e139f60e01b81565b61036f611375565b6103ba6105a73660046128c3565b611384565b6103ba6105ba366004612bb7565b611430565b6103f96105cd3660046127b2565b600d6020526000908152604090205481565b6103f96105ed3660046127b2565b600f6020526000908152604090205481565b61038f61060d3660046127b2565b6009602052600090815260409020546001600160a01b031681565b6103f96106363660046127b2565b6114f5565b6103ba610649366004612bf3565b611516565b61054663780e9d6360e01b81565b61036f61165e565b60015461038f906001600160a01b031681565b6103ba610685366004612cc8565b61166b565b6103f960045481565b61036f6106a13660046127b2565b6116ef565b61036f611859565b6105466380ac58cd60e01b81565b6103526106ca366004612d30565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b610352610706366004612d30565b600b60209081526000928352604080842090915290825290205460ff1681565b6103ba610734366004612d63565b611866565b6103f9610747366004612946565b600a6020526000908152604090205481565b60606002805461076890612da2565b80601f016020809104026020016040519081016040528092919081815260200182805461079490612da2565b80156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b5050505050905090565b6000818152600860205260408120546001600160a01b031661086b5760405162461bcd60e51b815260206004820152602e60248201527f546974616e4e46543a20617070726f76656420717565727920666f72206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084015b60405180910390fd5b506000908152600960205260409020546001600160a01b031690565b600061089282610f04565b9050806001600160a01b0316836001600160a01b031614156109025760405162461bcd60e51b815260206004820152602360248201527f546974616e4e46543a20617070726f76616c20746f2063757272656e74206f776044820152623732b960e91b6064820152608401610862565b336001600160a01b038216148061093c57506001600160a01b0381166000908152600b6020908152604080832033845290915290205460ff165b6109ae5760405162461bcd60e51b815260206004820152603a60248201527f546974616e4e46543a20617070726f76652063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f76656420666f7220616c6c0000000000006064820152608401610862565b6109b883836119c2565b505050565b600560205260009081526040902080546109d690612da2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0290612da2565b8015610a4f5780601f10610a2457610100808354040283529160200191610a4f565b820191906000526020600020905b815481529060010190602001808311610a3257829003601f168201915b505050505081565b6001546001600160a01b03163314610aab5760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b60105460ff16151560011415610aec5760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610862565b6010805460ff19166001179055610b038282611a30565b50506010805460ff19169055565b600660205260009081526040902080546109d690612da2565b610b343382611ac2565b610b9c5760405162461bcd60e51b815260206004820152603360248201527f546974616e4e46543a207472616e736665722063616c6c6572206973206e6f74604482015272081bdddb995c881b9bdc88185c1c1c9bdd9959606a1b6064820152608401610862565b6109b8838383611bbb565b6001546000906001600160a01b0383811691161415610bc857506001919050565b506000919050565b919050565b6000610be083610ffb565b8210610c3a5760405162461bcd60e51b815260206004820152602360248201527f546974616e4e46543a206f776e657220696e646578206f7574206f6620626f756044820152626e647360e81b6064820152608401610862565b6001600160a01b0383166000908152600c60205260409020805483908110610c6457610c64612ddd565b9060005260206000200154905092915050565b6109b88383836040518060200160405280600081525061166b565b6001546001600160a01b03163314610ce65760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b60105460ff16151560011415610d275760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610862565b6010805460ff19166001179055815115801590610d45575080518251145b610d805760405162461bcd60e51b815260206004820152600c60248201526b0eee4dedcce40d8cadccee8d60a31b6044820152606401610862565b60005b8251811015610dda57610dc8838281518110610da157610da1612ddd565b6020026020010151838381518110610dbb57610dbb612ddd565b6020026020010151611d9a565b80610dd281612e09565b915050610d83565b50506010805460ff1916905550565b600c6020528160005260406000208181548110610e0557600080fd5b90600052602060002001600091509150505481565b6000610e25600e5490565b8210610e7f5760405162461bcd60e51b8152602060048201526024808201527f546974616e4e46543a20676c6f62616c20696e646578206f7574206f6620626f604482015263756e647360e01b6064820152608401610862565b600e8281548110610e9257610e92612ddd565b90600052602060002001549050919050565b6001546001600160a01b03163314610ef85760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b610f0181611e6a565b50565b6000818152600860205260408120546001600160a01b031680610f8f5760405162461bcd60e51b815260206004820152602b60248201527f546974616e4e46543a206f776e657220717565727920666f72206e6f6e65786960448201527f7374656e7420746f6b656e0000000000000000000000000000000000000000006064820152608401610862565b92915050565b60606007805461076890612da2565b6060600e8054806020026020016040519081016040528092919081815260200182805480156107e157602002820191906000526020600020905b815481526020019060010190808311610fde575050505050905090565b60006001600160a01b0382166110795760405162461bcd60e51b815260206004820152602c60248201527f546974616e4e46543a2062616c616e636520717565727920666f72207468652060448201527f7a65726f206164647265737300000000000000000000000000000000000000006064820152608401610862565b6001600160a01b0382166000908152600a6020526040902054610f8f565b600780546109d690612da2565b6001600160a01b0381166000908152600c602090815260409182902080548351818402810184019094528084526060939283018282801561110457602002820191906000526020600020905b8154815260200190600101908083116110f0575b50505050509050919050565b6001546001600160a01b031633146111645760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b60105460ff161515600114156111a55760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610862565b6010805460ff191660011790558251158015906111c3575081518351145b6111fe5760405162461bcd60e51b815260206004820152600c60248201526b0eee4dedcce40d8cadccee8d60a31b6044820152606401610862565b60005b83518110156113655760045484828151811061121f5761121f612ddd565b6020026020010151111561126b5760405162461bcd60e51b81526020600482015260136024820152721b9bdd08185b1b1bddd959081d1bdad95b9259606a1b6044820152606401610862565b61128e8285838151811061128157611281612ddd565b6020026020010151611e81565b8281815181106112a0576112a0612ddd565b6020026020010151600660008684815181106112be576112be612ddd565b6020026020010151815260200190815260200160002090805190602001906112e7929190612674565b507f4d9b1f1701290894a3ce2b80ebc08192c14f3750d521c806657dc51b9705260a84828151811061131b5761131b612ddd565b602002602001015184838151811061133557611335612ddd565b602002602001015160405161134b929190612e24565b60405180910390a18061135d81612e09565b915050611201565b50506010805460ff191690555050565b60606003805461076890612da2565b6001546001600160a01b031633146113d85760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b60105460ff161515600114156114195760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610862565b6010805460ff19166001179055610b038282611d9a565b6001600160a01b0382163314156114895760405162461bcd60e51b815260206004820152601b60248201527f546974616e4e46543a20617070726f766520746f2063616c6c657200000000006044820152606401610862565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600e818154811061150557600080fd5b600091825260209091200154905081565b6001546001600160a01b0316331461156a5760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b60105460ff161515600114156115ab5760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610862565b6010805460ff191660011790558151158015906115c9575080518251145b6116045760405162461bcd60e51b815260206004820152600c60248201526b0eee4dedcce40d8cadccee8d60a31b6044820152606401610862565b60005b8251811015610dda5761164c83828151811061162557611625612ddd565b602002602001015183838151811061163f5761163f612ddd565b6020026020010151611a30565b8061165681612e09565b915050611607565b600380546109d690612da2565b6116753383611ac2565b6116dd5760405162461bcd60e51b815260206004820152603360248201527f546974616e4e46543a207472616e736665722063616c6c6572206973206e6f74604482015272081bdddb995c881b9bdc88185c1c1c9bdd9959606a1b6064820152608401610862565b6116e984848484611e9b565b50505050565b6000818152600860205260409020546060906001600160a01b03166117565760405162461bcd60e51b815260206004820152601b60248201527f546974616e4e46543a206e6f6e6578697374656e7420746f6b656e00000000006044820152606401610862565b6000828152600560205260408120805461176f90612da2565b80601f016020809104026020016040519081016040528092919081815260200182805461179b90612da2565b80156117e85780601f106117bd576101008083540402835291602001916117e8565b820191906000526020600020905b8154815290600101906020018083116117cb57829003601f168201915b5050505050905060006117f9610f95565b905080516000141561180c575092915050565b81511561183e578082604051602001611826929190612e3d565b60405160208183030381529060405292505050919050565b8061184885611f24565b604051602001611826929190612e3d565b600280546109d690612da2565b6001546001600160a01b031633146118ba5760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b60105460ff161515600114156118fb5760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610862565b6010805460ff191660011790556004548311156119505760405162461bcd60e51b81526020600482015260136024820152721b9bdd08185b1b1bddd959081d1bdad95b9259606a1b6044820152606401610862565b61195a8184611e81565b6000838152600660209081526040909120835161197992850190612674565b507f4d9b1f1701290894a3ce2b80ebc08192c14f3750d521c806657dc51b9705260a83836040516119ab929190612e24565b60405180910390a150506010805460ff1916905550565b600081815260096020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119f782610f04565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000828152600860205260409020546001600160a01b0316611aa35760405162461bcd60e51b815260206004820152602660248201527f546974616e4e46543a2055524920736574206f66206e6f6e6578697374656e74604482015265103a37b5b2b760d11b6064820152608401610862565b600082815260056020908152604090912082516109b892840190612674565b6000818152600860205260408120546001600160a01b0316611b3d5760405162461bcd60e51b815260206004820152602e60248201527f546974616e4e46543a206f70657261746f7220717565727920666f72206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610862565b6000611b4883610f04565b9050806001600160a01b0316846001600160a01b03161480611b835750836001600160a01b0316611b78846107eb565b6001600160a01b0316145b80611bb357506001600160a01b038082166000908152600b602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611bce82610f04565b6001600160a01b031614611c4a5760405162461bcd60e51b815260206004820152602f60248201527f50726f6a656374546f6b656e3a207472616e73666572206f6620746f6b656e2060448201527f74686174206973206e6f74206f776e00000000000000000000000000000000006064820152608401610862565b6001600160a01b038216611cb35760405162461bcd60e51b815260206004820152602a60248201527f50726f6a656374546f6b656e3a207472616e7366657220746f20746865207a65604482015269726f206164647265737360b01b6064820152608401610862565b611cbc81611fce565b6001600160a01b0383166000908152600a60205260409020611cdd90612009565b6001600160a01b0382166000908152600a6020526040902080546001019055600081815260086020526040902080546001600160a01b0319166001600160a01b038416179055611d2d8382612060565b6001600160a01b038281166000818152600c602081815260408084208054888652600d845282862081905593835260018401815584529083209091018590555184938716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000828152600860205260409020546001600160a01b0316611e0d5760405162461bcd60e51b815260206004820152602660248201527f546974616e4e46543a2055524920736574206f66206e6f6e6578697374656e74604482015265103a37b5b2b760d11b6064820152608401610862565b60008281526006602090815260409091208251611e2c92840190612674565b507f4d9b1f1701290894a3ce2b80ebc08192c14f3750d521c806657dc51b9705260a8282604051611e5e929190612e24565b60405180910390a15050565b8051611e7d906007906020840190612674565b5050565b611e7d82826040518060200160405280600081525061216f565b611ea6848484611bbb565b611eb28484848461226f565b6116e95760405162461bcd60e51b815260206004820152603460248201527f546974616e4e46543a207472616e7366657220746f206e6f6e2045524337323160448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610862565b60606000611f3183612340565b600101905060008167ffffffffffffffff811115611f5157611f5161280c565b6040519080825280601f01601f191660200182016040528015611f7b576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611fc157611fc6565b611f85565b509392505050565b6000818152600960205260409020546001600160a01b031615610f0157600090815260096020526040902080546001600160a01b0319169055565b8054806120585760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f7700000000006044820152606401610862565b600019019055565b6001600160a01b0382166000908152600c602052604081205461208590600190612e6c565b6000838152600d602052604090205490915080821461212c576001600160a01b0384166000908152600c602052604081208054849081106120c8576120c8612ddd565b9060005260206000200154905080600c6000876001600160a01b03166001600160a01b03168152602001908152602001600020838154811061210c5761210c612ddd565b6000918252602080832090910192909255918252600d9052604090208190555b6001600160a01b0384166000908152600c6020526040902080548061215357612153612e83565b6001900381819060005260206000200160009055905550505050565b6121798383612422565b6001600160a01b0383166000908152600c602090815260408083208054868552600d84528285208190556001808201835591855283852001869055600e8054878652600f9094529184208390558201815582527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018390556121fd9084848461226f565b6109b85760405162461bcd60e51b815260206004820152603460248201527f546974616e4e46543a207472616e7366657220746f206e6f6e2045524337323160448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610862565b60006001600160a01b0384163b61228857506001611bb3565b600061230963150b7a0260e01b338887876040516024016122ac9493929190612e99565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060348152602001612f0f603491396001600160a01b0388169190612554565b90506000818060200190518101906123219190612ed5565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612389577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106123b5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106123d357662386f26fc10000830492506010015b6305f5e10083106123eb576305f5e100830492506008015b61271083106123ff57612710830492506004015b60648310612411576064830492506002015b600a8310610f8f5760010192915050565b6001600160a01b0382166124835760405162461bcd60e51b815260206004820152602260248201527f546974616e4e46543a206d696e7420746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610862565b6000818152600860205260409020546001600160a01b0316156124e85760405162461bcd60e51b815260206004820152601e60248201527f546974616e4e46543a20746f6b656e20616c7265616479206d696e74656400006044820152606401610862565b600081815260086020908152604080832080546001600160a01b0319166001600160a01b038716908117909155808452600a90925280832080546001019055518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060611bb3848460008585600080866001600160a01b0316858760405161257b9190612ef2565b60006040518083038185875af1925050503d80600081146125b8576040519150601f19603f3d011682016040523d82523d6000602084013e6125bd565b606091505b50915091506125ce878383876125d9565b979650505050505050565b6060831561264557825161263e576001600160a01b0385163b61263e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610862565b5081611bb3565b611bb3838381511561265a5781518083602001fd5b8060405162461bcd60e51b8152600401610862919061279f565b82805461268090612da2565b90600052602060002090601f0160209004810192826126a257600085556126e8565b82601f106126bb57805160ff19168380011785556126e8565b828001600101855582156126e8579182015b828111156126e85782518255916020019190600101906126cd565b506126f49291506126f8565b5090565b5b808211156126f457600081556001016126f9565b6001600160e01b031981168114610f0157600080fd5b60006020828403121561273557600080fd5b81356127408161270d565b9392505050565b60005b8381101561276257818101518382015260200161274a565b838111156116e95750506000910152565b6000815180845261278b816020860160208601612747565b601f01601f19169290920160200192915050565b6020815260006127406020830184612773565b6000602082840312156127c457600080fd5b5035919050565b80356001600160a01b0381168114610bd057600080fd5b600080604083850312156127f557600080fd5b6127fe836127cb565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561284b5761284b61280c565b604052919050565b600082601f83011261286457600080fd5b813567ffffffffffffffff81111561287e5761287e61280c565b612891601f8201601f1916602001612822565b8181528460208386010111156128a657600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156128d657600080fd5b82359150602083013567ffffffffffffffff8111156128f457600080fd5b61290085828601612853565b9150509250929050565b60008060006060848603121561291f57600080fd5b612928846127cb565b9250612936602085016127cb565b9150604084013590509250925092565b60006020828403121561295857600080fd5b612740826127cb565b600067ffffffffffffffff82111561297b5761297b61280c565b5060051b60200190565b600082601f83011261299657600080fd5b813560206129ab6129a683612961565b612822565b82815260059290921b840181019181810190868411156129ca57600080fd5b8286015b848110156129e557803583529183019183016129ce565b509695505050505050565b600082601f830112612a0157600080fd5b81356020612a116129a683612961565b82815260059290921b84018101918181019086841115612a3057600080fd5b8286015b848110156129e557803567ffffffffffffffff811115612a545760008081fd5b612a628986838b0101612853565b845250918301918301612a34565b60008060408385031215612a8357600080fd5b823567ffffffffffffffff80821115612a9b57600080fd5b612aa786838701612985565b93506020850135915080821115612abd57600080fd5b50612900858286016129f0565b600060208284031215612adc57600080fd5b813567ffffffffffffffff811115612af357600080fd5b611bb384828501612853565b6020808252825182820181905260009190848201906040850190845b81811015612b3757835183529284019291840191600101612b1b565b50909695505050505050565b600080600060608486031215612b5857600080fd5b833567ffffffffffffffff80821115612b7057600080fd5b612b7c87838801612985565b94506020860135915080821115612b9257600080fd5b50612b9f868287016129f0565b925050612bae604085016127cb565b90509250925092565b60008060408385031215612bca57600080fd5b612bd3836127cb565b915060208301358015158114612be857600080fd5b809150509250929050565b60008060408385031215612c0657600080fd5b823567ffffffffffffffff80821115612c1e57600080fd5b612c2a86838701612985565b9350602091508185013581811115612c4157600080fd5b8501601f81018713612c5257600080fd5b8035612c606129a682612961565b81815260059190911b82018401908481019089831115612c7f57600080fd5b8584015b83811015612cb757803586811115612c9b5760008081fd5b612ca98c8983890101612853565b845250918601918601612c83565b508096505050505050509250929050565b60008060008060808587031215612cde57600080fd5b612ce7856127cb565b9350612cf5602086016127cb565b925060408501359150606085013567ffffffffffffffff811115612d1857600080fd5b612d2487828801612853565b91505092959194509250565b60008060408385031215612d4357600080fd5b612d4c836127cb565b9150612d5a602084016127cb565b90509250929050565b600080600060608486031215612d7857600080fd5b83359250602084013567ffffffffffffffff811115612d9657600080fd5b612b9f86828701612853565b600181811c90821680612db657607f821691505b60208210811415612dd757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612e1d57612e1d612df3565b5060010190565b828152604060208201526000611bb36040830184612773565b60008351612e4f818460208801612747565b835190830190612e63818360208801612747565b01949350505050565b600082821015612e7e57612e7e612df3565b500390565b634e487b7160e01b600052603160045260246000fd5b60006001600160a01b03808716835280861660208401525083604083015260806060830152612ecb6080830184612773565b9695505050505050565b600060208284031215612ee757600080fd5b81516127408161270d565b60008251612f04818460208701612747565b919091019291505056fe546974616e4e46543a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572a164736f6c6343000809000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103205760003560e01c806388290adc116101a7578063b01ac591116100ee578063d28d885211610097578063edc3bc3f11610071578063edc3bc3f146106f8578063f47c387814610726578063f66317181461073957600080fd5b8063d28d8852146106a6578063dece6854146106ae578063e985e9c5146106bc57600080fd5b8063b88d4fde116100c8578063b88d4fde14610677578063c5ea3c651461068a578063c87b56dd1461069357600080fd5b8063b01ac5911461064e578063b09f12661461065c578063b2bdfa7b1461066457600080fd5b8063a22cb46511610150578063a7cc01361161012a578063a7cc0136146105ff578063aa5965ae14610628578063aafb2d441461063b57600080fd5b8063a22cb465146105ac578063a2e9b439146105bf578063a7263665146105df57600080fd5b806394a509dd1161018157806394a509dd1461058357806395d89b41146105915780639be10b961461059957600080fd5b806388290adc14610538578063897f41521461055f5780638da5cb5b1461057257600080fd5b80634a1dbdc01161026b5780636c0360eb11610214578063743976a0116101ee578063743976a0146104f4578063796db312146104fc5780638462151c1461052557600080fd5b80636c0360eb146104c45780636ff97f1d146104cc57806370a08231146104e157600080fd5b806355f804b31161024557806355f804b31461048c5780636352211e1461049f57806363a8fd89146104b257600080fd5b80634a1dbdc0146104535780634f3c5f06146104665780634f6ccce71461047957600080fd5b806317a3a79c116102cd5780632f54bf6e116102a75780632f54bf6e1461041a5780632f745c591461042d57806342842e0e1461044057600080fd5b806317a3a79c146103e257806318160ddd146103f557806323b872dd1461040757600080fd5b8063095ea7b3116102fe578063095ea7b3146103a75780630bb78ec1146103bc578063162094c4146103cf57600080fd5b806301ffc9a71461032557806306fdde0314610367578063081812fc1461037c575b600080fd5b610352610333366004612723565b6001600160e01b03191660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b61036f610759565b60405161035e919061279f565b61038f61038a3660046127b2565b6107eb565b6040516001600160a01b03909116815260200161035e565b6103ba6103b53660046127e2565b610887565b005b61036f6103ca3660046127b2565b6109bd565b6103ba6103dd3660046128c3565b610a57565b61036f6103f03660046127b2565b610b11565b600e545b60405190815260200161035e565b6103ba61041536600461290a565b610b2a565b610352610428366004612946565b610ba7565b6103f961043b3660046127e2565b610bd5565b6103ba61044e36600461290a565b610c77565b6103ba610461366004612a70565b610c92565b6103f96104743660046127e2565b610de9565b6103f96104873660046127b2565b610e1a565b6103ba61049a366004612aca565b610ea4565b61038f6104ad3660046127b2565b610f04565b60105461035290610100900460ff1681565b61036f610f95565b6104d4610fa4565b60405161035e9190612aff565b6103f96104ef366004612946565b610ffb565b61036f611097565b61038f61050a3660046127b2565b6008602052600090815260409020546001600160a01b031681565b6104d4610533366004612946565b6110a4565b610546630a85bd0160e11b81565b6040516001600160e01b0319909116815260200161035e565b6103ba61056d366004612b43565b611110565b6001546001600160a01b031661038f565b610546635b5e139f60e01b81565b61036f611375565b6103ba6105a73660046128c3565b611384565b6103ba6105ba366004612bb7565b611430565b6103f96105cd3660046127b2565b600d6020526000908152604090205481565b6103f96105ed3660046127b2565b600f6020526000908152604090205481565b61038f61060d3660046127b2565b6009602052600090815260409020546001600160a01b031681565b6103f96106363660046127b2565b6114f5565b6103ba610649366004612bf3565b611516565b61054663780e9d6360e01b81565b61036f61165e565b60015461038f906001600160a01b031681565b6103ba610685366004612cc8565b61166b565b6103f960045481565b61036f6106a13660046127b2565b6116ef565b61036f611859565b6105466380ac58cd60e01b81565b6103526106ca366004612d30565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b610352610706366004612d30565b600b60209081526000928352604080842090915290825290205460ff1681565b6103ba610734366004612d63565b611866565b6103f9610747366004612946565b600a6020526000908152604090205481565b60606002805461076890612da2565b80601f016020809104026020016040519081016040528092919081815260200182805461079490612da2565b80156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b5050505050905090565b6000818152600860205260408120546001600160a01b031661086b5760405162461bcd60e51b815260206004820152602e60248201527f546974616e4e46543a20617070726f76656420717565727920666f72206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084015b60405180910390fd5b506000908152600960205260409020546001600160a01b031690565b600061089282610f04565b9050806001600160a01b0316836001600160a01b031614156109025760405162461bcd60e51b815260206004820152602360248201527f546974616e4e46543a20617070726f76616c20746f2063757272656e74206f776044820152623732b960e91b6064820152608401610862565b336001600160a01b038216148061093c57506001600160a01b0381166000908152600b6020908152604080832033845290915290205460ff165b6109ae5760405162461bcd60e51b815260206004820152603a60248201527f546974616e4e46543a20617070726f76652063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f76656420666f7220616c6c0000000000006064820152608401610862565b6109b883836119c2565b505050565b600560205260009081526040902080546109d690612da2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0290612da2565b8015610a4f5780601f10610a2457610100808354040283529160200191610a4f565b820191906000526020600020905b815481529060010190602001808311610a3257829003601f168201915b505050505081565b6001546001600160a01b03163314610aab5760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b60105460ff16151560011415610aec5760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610862565b6010805460ff19166001179055610b038282611a30565b50506010805460ff19169055565b600660205260009081526040902080546109d690612da2565b610b343382611ac2565b610b9c5760405162461bcd60e51b815260206004820152603360248201527f546974616e4e46543a207472616e736665722063616c6c6572206973206e6f74604482015272081bdddb995c881b9bdc88185c1c1c9bdd9959606a1b6064820152608401610862565b6109b8838383611bbb565b6001546000906001600160a01b0383811691161415610bc857506001919050565b506000919050565b919050565b6000610be083610ffb565b8210610c3a5760405162461bcd60e51b815260206004820152602360248201527f546974616e4e46543a206f776e657220696e646578206f7574206f6620626f756044820152626e647360e81b6064820152608401610862565b6001600160a01b0383166000908152600c60205260409020805483908110610c6457610c64612ddd565b9060005260206000200154905092915050565b6109b88383836040518060200160405280600081525061166b565b6001546001600160a01b03163314610ce65760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b60105460ff16151560011415610d275760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610862565b6010805460ff19166001179055815115801590610d45575080518251145b610d805760405162461bcd60e51b815260206004820152600c60248201526b0eee4dedcce40d8cadccee8d60a31b6044820152606401610862565b60005b8251811015610dda57610dc8838281518110610da157610da1612ddd565b6020026020010151838381518110610dbb57610dbb612ddd565b6020026020010151611d9a565b80610dd281612e09565b915050610d83565b50506010805460ff1916905550565b600c6020528160005260406000208181548110610e0557600080fd5b90600052602060002001600091509150505481565b6000610e25600e5490565b8210610e7f5760405162461bcd60e51b8152602060048201526024808201527f546974616e4e46543a20676c6f62616c20696e646578206f7574206f6620626f604482015263756e647360e01b6064820152608401610862565b600e8281548110610e9257610e92612ddd565b90600052602060002001549050919050565b6001546001600160a01b03163314610ef85760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b610f0181611e6a565b50565b6000818152600860205260408120546001600160a01b031680610f8f5760405162461bcd60e51b815260206004820152602b60248201527f546974616e4e46543a206f776e657220717565727920666f72206e6f6e65786960448201527f7374656e7420746f6b656e0000000000000000000000000000000000000000006064820152608401610862565b92915050565b60606007805461076890612da2565b6060600e8054806020026020016040519081016040528092919081815260200182805480156107e157602002820191906000526020600020905b815481526020019060010190808311610fde575050505050905090565b60006001600160a01b0382166110795760405162461bcd60e51b815260206004820152602c60248201527f546974616e4e46543a2062616c616e636520717565727920666f72207468652060448201527f7a65726f206164647265737300000000000000000000000000000000000000006064820152608401610862565b6001600160a01b0382166000908152600a6020526040902054610f8f565b600780546109d690612da2565b6001600160a01b0381166000908152600c602090815260409182902080548351818402810184019094528084526060939283018282801561110457602002820191906000526020600020905b8154815260200190600101908083116110f0575b50505050509050919050565b6001546001600160a01b031633146111645760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b60105460ff161515600114156111a55760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610862565b6010805460ff191660011790558251158015906111c3575081518351145b6111fe5760405162461bcd60e51b815260206004820152600c60248201526b0eee4dedcce40d8cadccee8d60a31b6044820152606401610862565b60005b83518110156113655760045484828151811061121f5761121f612ddd565b6020026020010151111561126b5760405162461bcd60e51b81526020600482015260136024820152721b9bdd08185b1b1bddd959081d1bdad95b9259606a1b6044820152606401610862565b61128e8285838151811061128157611281612ddd565b6020026020010151611e81565b8281815181106112a0576112a0612ddd565b6020026020010151600660008684815181106112be576112be612ddd565b6020026020010151815260200190815260200160002090805190602001906112e7929190612674565b507f4d9b1f1701290894a3ce2b80ebc08192c14f3750d521c806657dc51b9705260a84828151811061131b5761131b612ddd565b602002602001015184838151811061133557611335612ddd565b602002602001015160405161134b929190612e24565b60405180910390a18061135d81612e09565b915050611201565b50506010805460ff191690555050565b60606003805461076890612da2565b6001546001600160a01b031633146113d85760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b60105460ff161515600114156114195760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610862565b6010805460ff19166001179055610b038282611d9a565b6001600160a01b0382163314156114895760405162461bcd60e51b815260206004820152601b60248201527f546974616e4e46543a20617070726f766520746f2063616c6c657200000000006044820152606401610862565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600e818154811061150557600080fd5b600091825260209091200154905081565b6001546001600160a01b0316331461156a5760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b60105460ff161515600114156115ab5760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610862565b6010805460ff191660011790558151158015906115c9575080518251145b6116045760405162461bcd60e51b815260206004820152600c60248201526b0eee4dedcce40d8cadccee8d60a31b6044820152606401610862565b60005b8251811015610dda5761164c83828151811061162557611625612ddd565b602002602001015183838151811061163f5761163f612ddd565b6020026020010151611a30565b8061165681612e09565b915050611607565b600380546109d690612da2565b6116753383611ac2565b6116dd5760405162461bcd60e51b815260206004820152603360248201527f546974616e4e46543a207472616e736665722063616c6c6572206973206e6f74604482015272081bdddb995c881b9bdc88185c1c1c9bdd9959606a1b6064820152608401610862565b6116e984848484611e9b565b50505050565b6000818152600860205260409020546060906001600160a01b03166117565760405162461bcd60e51b815260206004820152601b60248201527f546974616e4e46543a206e6f6e6578697374656e7420746f6b656e00000000006044820152606401610862565b6000828152600560205260408120805461176f90612da2565b80601f016020809104026020016040519081016040528092919081815260200182805461179b90612da2565b80156117e85780601f106117bd576101008083540402835291602001916117e8565b820191906000526020600020905b8154815290600101906020018083116117cb57829003601f168201915b5050505050905060006117f9610f95565b905080516000141561180c575092915050565b81511561183e578082604051602001611826929190612e3d565b60405160208183030381529060405292505050919050565b8061184885611f24565b604051602001611826929190612e3d565b600280546109d690612da2565b6001546001600160a01b031633146118ba5760405162461bcd60e51b815260206004820152601760248201527631b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610862565b60105460ff161515600114156118fb5760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610862565b6010805460ff191660011790556004548311156119505760405162461bcd60e51b81526020600482015260136024820152721b9bdd08185b1b1bddd959081d1bdad95b9259606a1b6044820152606401610862565b61195a8184611e81565b6000838152600660209081526040909120835161197992850190612674565b507f4d9b1f1701290894a3ce2b80ebc08192c14f3750d521c806657dc51b9705260a83836040516119ab929190612e24565b60405180910390a150506010805460ff1916905550565b600081815260096020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119f782610f04565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000828152600860205260409020546001600160a01b0316611aa35760405162461bcd60e51b815260206004820152602660248201527f546974616e4e46543a2055524920736574206f66206e6f6e6578697374656e74604482015265103a37b5b2b760d11b6064820152608401610862565b600082815260056020908152604090912082516109b892840190612674565b6000818152600860205260408120546001600160a01b0316611b3d5760405162461bcd60e51b815260206004820152602e60248201527f546974616e4e46543a206f70657261746f7220717565727920666f72206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610862565b6000611b4883610f04565b9050806001600160a01b0316846001600160a01b03161480611b835750836001600160a01b0316611b78846107eb565b6001600160a01b0316145b80611bb357506001600160a01b038082166000908152600b602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611bce82610f04565b6001600160a01b031614611c4a5760405162461bcd60e51b815260206004820152602f60248201527f50726f6a656374546f6b656e3a207472616e73666572206f6620746f6b656e2060448201527f74686174206973206e6f74206f776e00000000000000000000000000000000006064820152608401610862565b6001600160a01b038216611cb35760405162461bcd60e51b815260206004820152602a60248201527f50726f6a656374546f6b656e3a207472616e7366657220746f20746865207a65604482015269726f206164647265737360b01b6064820152608401610862565b611cbc81611fce565b6001600160a01b0383166000908152600a60205260409020611cdd90612009565b6001600160a01b0382166000908152600a6020526040902080546001019055600081815260086020526040902080546001600160a01b0319166001600160a01b038416179055611d2d8382612060565b6001600160a01b038281166000818152600c602081815260408084208054888652600d845282862081905593835260018401815584529083209091018590555184938716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000828152600860205260409020546001600160a01b0316611e0d5760405162461bcd60e51b815260206004820152602660248201527f546974616e4e46543a2055524920736574206f66206e6f6e6578697374656e74604482015265103a37b5b2b760d11b6064820152608401610862565b60008281526006602090815260409091208251611e2c92840190612674565b507f4d9b1f1701290894a3ce2b80ebc08192c14f3750d521c806657dc51b9705260a8282604051611e5e929190612e24565b60405180910390a15050565b8051611e7d906007906020840190612674565b5050565b611e7d82826040518060200160405280600081525061216f565b611ea6848484611bbb565b611eb28484848461226f565b6116e95760405162461bcd60e51b815260206004820152603460248201527f546974616e4e46543a207472616e7366657220746f206e6f6e2045524337323160448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610862565b60606000611f3183612340565b600101905060008167ffffffffffffffff811115611f5157611f5161280c565b6040519080825280601f01601f191660200182016040528015611f7b576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611fc157611fc6565b611f85565b509392505050565b6000818152600960205260409020546001600160a01b031615610f0157600090815260096020526040902080546001600160a01b0319169055565b8054806120585760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f7700000000006044820152606401610862565b600019019055565b6001600160a01b0382166000908152600c602052604081205461208590600190612e6c565b6000838152600d602052604090205490915080821461212c576001600160a01b0384166000908152600c602052604081208054849081106120c8576120c8612ddd565b9060005260206000200154905080600c6000876001600160a01b03166001600160a01b03168152602001908152602001600020838154811061210c5761210c612ddd565b6000918252602080832090910192909255918252600d9052604090208190555b6001600160a01b0384166000908152600c6020526040902080548061215357612153612e83565b6001900381819060005260206000200160009055905550505050565b6121798383612422565b6001600160a01b0383166000908152600c602090815260408083208054868552600d84528285208190556001808201835591855283852001869055600e8054878652600f9094529184208390558201815582527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018390556121fd9084848461226f565b6109b85760405162461bcd60e51b815260206004820152603460248201527f546974616e4e46543a207472616e7366657220746f206e6f6e2045524337323160448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610862565b60006001600160a01b0384163b61228857506001611bb3565b600061230963150b7a0260e01b338887876040516024016122ac9493929190612e99565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060348152602001612f0f603491396001600160a01b0388169190612554565b90506000818060200190518101906123219190612ed5565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612389577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106123b5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106123d357662386f26fc10000830492506010015b6305f5e10083106123eb576305f5e100830492506008015b61271083106123ff57612710830492506004015b60648310612411576064830492506002015b600a8310610f8f5760010192915050565b6001600160a01b0382166124835760405162461bcd60e51b815260206004820152602260248201527f546974616e4e46543a206d696e7420746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610862565b6000818152600860205260409020546001600160a01b0316156124e85760405162461bcd60e51b815260206004820152601e60248201527f546974616e4e46543a20746f6b656e20616c7265616479206d696e74656400006044820152606401610862565b600081815260086020908152604080832080546001600160a01b0319166001600160a01b038716908117909155808452600a90925280832080546001019055518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060611bb3848460008585600080866001600160a01b0316858760405161257b9190612ef2565b60006040518083038185875af1925050503d80600081146125b8576040519150601f19603f3d011682016040523d82523d6000602084013e6125bd565b606091505b50915091506125ce878383876125d9565b979650505050505050565b6060831561264557825161263e576001600160a01b0385163b61263e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610862565b5081611bb3565b611bb3838381511561265a5781518083602001fd5b8060405162461bcd60e51b8152600401610862919061279f565b82805461268090612da2565b90600052602060002090601f0160209004810192826126a257600085556126e8565b82601f106126bb57805160ff19168380011785556126e8565b828001600101855582156126e8579182015b828111156126e85782518255916020019190600101906126cd565b506126f49291506126f8565b5090565b5b808211156126f457600081556001016126f9565b6001600160e01b031981168114610f0157600080fd5b60006020828403121561273557600080fd5b81356127408161270d565b9392505050565b60005b8381101561276257818101518382015260200161274a565b838111156116e95750506000910152565b6000815180845261278b816020860160208601612747565b601f01601f19169290920160200192915050565b6020815260006127406020830184612773565b6000602082840312156127c457600080fd5b5035919050565b80356001600160a01b0381168114610bd057600080fd5b600080604083850312156127f557600080fd5b6127fe836127cb565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561284b5761284b61280c565b604052919050565b600082601f83011261286457600080fd5b813567ffffffffffffffff81111561287e5761287e61280c565b612891601f8201601f1916602001612822565b8181528460208386010111156128a657600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156128d657600080fd5b82359150602083013567ffffffffffffffff8111156128f457600080fd5b61290085828601612853565b9150509250929050565b60008060006060848603121561291f57600080fd5b612928846127cb565b9250612936602085016127cb565b9150604084013590509250925092565b60006020828403121561295857600080fd5b612740826127cb565b600067ffffffffffffffff82111561297b5761297b61280c565b5060051b60200190565b600082601f83011261299657600080fd5b813560206129ab6129a683612961565b612822565b82815260059290921b840181019181810190868411156129ca57600080fd5b8286015b848110156129e557803583529183019183016129ce565b509695505050505050565b600082601f830112612a0157600080fd5b81356020612a116129a683612961565b82815260059290921b84018101918181019086841115612a3057600080fd5b8286015b848110156129e557803567ffffffffffffffff811115612a545760008081fd5b612a628986838b0101612853565b845250918301918301612a34565b60008060408385031215612a8357600080fd5b823567ffffffffffffffff80821115612a9b57600080fd5b612aa786838701612985565b93506020850135915080821115612abd57600080fd5b50612900858286016129f0565b600060208284031215612adc57600080fd5b813567ffffffffffffffff811115612af357600080fd5b611bb384828501612853565b6020808252825182820181905260009190848201906040850190845b81811015612b3757835183529284019291840191600101612b1b565b50909695505050505050565b600080600060608486031215612b5857600080fd5b833567ffffffffffffffff80821115612b7057600080fd5b612b7c87838801612985565b94506020860135915080821115612b9257600080fd5b50612b9f868287016129f0565b925050612bae604085016127cb565b90509250925092565b60008060408385031215612bca57600080fd5b612bd3836127cb565b915060208301358015158114612be857600080fd5b809150509250929050565b60008060408385031215612c0657600080fd5b823567ffffffffffffffff80821115612c1e57600080fd5b612c2a86838701612985565b9350602091508185013581811115612c4157600080fd5b8501601f81018713612c5257600080fd5b8035612c606129a682612961565b81815260059190911b82018401908481019089831115612c7f57600080fd5b8584015b83811015612cb757803586811115612c9b5760008081fd5b612ca98c8983890101612853565b845250918601918601612c83565b508096505050505050509250929050565b60008060008060808587031215612cde57600080fd5b612ce7856127cb565b9350612cf5602086016127cb565b925060408501359150606085013567ffffffffffffffff811115612d1857600080fd5b612d2487828801612853565b91505092959194509250565b60008060408385031215612d4357600080fd5b612d4c836127cb565b9150612d5a602084016127cb565b90509250929050565b600080600060608486031215612d7857600080fd5b83359250602084013567ffffffffffffffff811115612d9657600080fd5b612b9f86828701612853565b600181811c90821680612db657607f821691505b60208210811415612dd757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612e1d57612e1d612df3565b5060010190565b828152604060208201526000611bb36040830184612773565b60008351612e4f818460208801612747565b835190830190612e63818360208801612747565b01949350505050565b600082821015612e7e57612e7e612df3565b500390565b634e487b7160e01b600052603160045260246000fd5b60006001600160a01b03808716835280861660208401525083604083015260806060830152612ecb6080830184612773565b9695505050505050565b600060208284031215612ee757600080fd5b81516127408161270d565b60008251612f04818460208701612747565b919091019291505056fe546974616e4e46543a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572a164736f6c6343000809000a",
  "devdoc": {
    "details": "see https://eips.ethereum.org/EIPS/eip-721",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isOwner(address)": {
        "details": "Returns the address of the current owner."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "Overrides supportsInterface"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "ERC721 Non-Fungible Token Standard basic implementation",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1821,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 3382,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3384,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3386,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3388,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "maxId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3392,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3396,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_tokenAttributes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 3398,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_baseURI",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3402,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_tokenOwner",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3406,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3411,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_ownedTokensCount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(Counter)527_storage)"
      },
      {
        "astId": 3417,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3422,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3426,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3429,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3433,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3435,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "_lock",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 3437,
        "contract": "contracts/TitanNFT.sol:TitanNFT",
        "label": "pauseProxy",
        "offset": 1,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Counter)527_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)527_storage"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)527_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 526,
            "contract": "contracts/TitanNFT.sol:TitanNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}