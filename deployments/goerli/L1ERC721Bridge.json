{
  "address": "0xDb4eF2B001f0fcE75cF2551eDEfD516AFd3aCC57",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "localToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "remoteToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "ERC721BridgeFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "localToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "remoteToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "ERC721BridgeInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "messenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "otherBridge",
          "type": "address"
        }
      ],
      "name": "SetL1ERC721Bridge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "major",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "patch",
          "type": "uint256"
        }
      ],
      "name": "SetSemver",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAJOR_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MESSENGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINOR_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OTHER_BRIDGE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PATCH_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "__gap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_localToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_remoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "bridgeERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_localToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_remoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "bridgeERC721To",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_localToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_remoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "finalizeBridgeERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messenger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_otherBridge",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "otherBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_major",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_patch",
          "type": "uint256"
        }
      ],
      "name": "setSemver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa7fbdb0cf958f80025320a7cd058ab169e0716b6dad21801f7928f08190ef2f",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0xDb4eF2B001f0fcE75cF2551eDEfD516AFd3aCC57",
    "transactionIndex": 42,
    "gasUsed": "1000990",
    "logsBloom": "0x
    "blockHash": "0x5a56a3ad8a36f2973d5b6a15966d74fe7cfd13bfa3c663e8f6ff04d0e353af71",
    "transactionHash": "0xfa7fbdb0cf958f80025320a7cd058ab169e0716b6dad21801f7928f08190ef2f",
    "logs": [],
    "blockNumber": 9476505,
    "cumulativeGasUsed": "11951418",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cc031509ba2e51f9287f9e91f587602e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ERC721BridgeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ERC721BridgeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"otherBridge\",\"type\":\"address\"}],\"name\":\"SetL1ERC721Bridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"major\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"patch\",\"type\":\"uint256\"}],\"name\":\"SetSemver\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAJOR_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESSENGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINOR_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTHER_BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PATCH_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"__gap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"bridgeERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"bridgeERC721To\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"finalizeBridgeERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_otherBridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_major\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_patch\",\"type\":\"uint256\"}],\"name\":\"setSemver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ERC721BridgeFinalized(address,address,address,address,uint256,bytes)\":{\"params\":{\"extraData\":\"Extra data for use on the client-side.\",\"from\":\"Address that initiated bridging action.\",\"localToken\":\"Address of the token on this domain.\",\"remoteToken\":\"Address of the token on the remote domain.\",\"to\":\"Address to receive the token.\",\"tokenId\":\"ID of the specific token deposited.\"}},\"ERC721BridgeInitiated(address,address,address,address,uint256,bytes)\":{\"params\":{\"extraData\":\"Extra data for use on the client-side.\",\"from\":\"Address that initiated bridging action.\",\"localToken\":\"Address of the token on this domain.\",\"remoteToken\":\"Address of the token on the remote domain.\",\"to\":\"Address to receive the token.\",\"tokenId\":\"ID of the specific token deposited.\"}}},\"kind\":\"dev\",\"methods\":{\"bridgeERC721(address,address,uint256,uint32,bytes)\":{\"params\":{\"_extraData\":\"Optional data to forward to the other chain. Data supplied here will not                     be used to execute any code on the other chain and is only emitted as                     extra data for the convenience of off-chain tooling.\",\"_localToken\":\"Address of the ERC721 on this domain.\",\"_minGasLimit\":\"Minimum gas limit for the bridge message on the other domain.\",\"_remoteToken\":\"Address of the ERC721 on the remote domain.\",\"_tokenId\":\"Token ID to bridge.\"}},\"bridgeERC721To(address,address,address,uint256,uint32,bytes)\":{\"params\":{\"_extraData\":\"Optional data to forward to the other chain. Data supplied here will not                     be used to execute any code on the other chain and is only emitted as                     extra data for the convenience of off-chain tooling.\",\"_localToken\":\"Address of the ERC721 on this domain.\",\"_minGasLimit\":\"Minimum gas limit for the bridge message on the other domain.\",\"_remoteToken\":\"Address of the ERC721 on the remote domain.\",\"_to\":\"Address to receive the token on the other domain.\",\"_tokenId\":\"Token ID to bridge.\"}},\"finalizeBridgeERC721(address,address,address,address,uint256,bytes)\":{\"params\":{\"_extraData\":\"Optional data to forward to L1. Data supplied here will not be used to                     execute any code on L1 and is only emitted as extra data for the                     convenience of off-chain tooling.\",\"_from\":\"Address that triggered the bridge on the other domain.\",\"_localToken\":\"Address of the ERC721 token on this domain.\",\"_remoteToken\":\"Address of the ERC721 token on the other domain.\",\"_to\":\"Address to receive the token on this domain.\",\"_tokenId\":\"ID of the token being deposited.\"}},\"messenger()\":{\"custom:legacy\":\"@notice Legacy getter for messenger contract.\",\"returns\":{\"_0\":\"Messenger contract on this domain.\"}},\"otherBridge()\":{\"custom:legacy\":\"@notice Legacy getter for other bridge address.\",\"returns\":{\"_0\":\"Address of the bridge on the other network.\"}}},\"title\":\"L1ERC721Bridge\",\"version\":1},\"userdoc\":{\"events\":{\"ERC721BridgeFinalized(address,address,address,address,uint256,bytes)\":{\"notice\":\"Emitted when an ERC721 bridge from the other network is finalized.\"},\"ERC721BridgeInitiated(address,address,address,address,uint256,bytes)\":{\"notice\":\"Emitted when an ERC721 bridge to the other network is initiated.\"}},\"kind\":\"user\",\"methods\":{\"MAJOR_VERSION()\":{\"notice\":\"Contract version number (major).\"},\"MESSENGER()\":{\"notice\":\"Messenger contract on this domain. (CrossDomainMessenger)\"},\"MINOR_VERSION()\":{\"notice\":\"Contract version number (minor).\"},\"OTHER_BRIDGE()\":{\"notice\":\"Address of the bridge on the other network.\"},\"PATCH_VERSION()\":{\"notice\":\"Contract version number (patch).\"},\"__gap(uint256)\":{\"notice\":\"Reserve extra slots (to a total of 50) in the storage layout for future upgrades.\"},\"bridgeERC721(address,address,uint256,uint32,bytes)\":{\"notice\":\"Initiates a bridge of an NFT to the caller's account on the other chain. Note that         this function can only be called by EOAs. Smart contract wallets should use the         `bridgeERC721To` function after ensuring that the recipient address on the remote         chain exists. Also note that the current owner of the token on this chain must         approve this contract to operate the NFT before it can be bridged.         **WARNING**: Do not bridge an ERC721 that was originally deployed on Optimism. This         bridge only supports ERC721s originally deployed on Ethereum. Users will need to         wait for the one-week challenge period to elapse before their Optimism-native NFT         can be refunded on L2.\"},\"bridgeERC721To(address,address,address,uint256,uint32,bytes)\":{\"notice\":\"Initiates a bridge of an NFT to some recipient's account on the other chain. Note         that the current owner of the token on this chain must approve this contract to         operate the NFT before it can be bridged.         **WARNING**: Do not bridge an ERC721 that was originally deployed on Optimism. This         bridge only supports ERC721s originally deployed on Ethereum. Users will need to         wait for the one-week challenge period to elapse before their Optimism-native NFT         can be refunded on L2.\"},\"finalizeBridgeERC721(address,address,address,address,uint256,bytes)\":{\"notice\":\"Completes an ERC721 bridge from the other domain and sends the ERC721 token to the         recipient on this domain.\"}},\"notice\":\"The L1 ERC721 bridge is a contract which works together with the L2 ERC721 bridge to         make it possible to transfer ERC721 tokens from Ethereum to Optimism. This contract         acts as an escrow for ERC721 tokens deposited into L2.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/L1ERC721Bridge.sol\":\"L1ERC721Bridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/L1/L1ERC721Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { IOptimismMintableERC721 } from \\\"../universal/IOptimismMintableERC721.sol\\\";\\n\\nimport \\\"./L1ERC721BridgeStorage.sol\\\";\\n\\ninterface ICrossDomainMessenger {\\n    function xDomainMessageSender() external view returns (address);\\n    function sendMessage(\\n        address _target,\\n        bytes memory _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\\ninterface IL2ERC721Bridge {\\n    function finalizeBridgeERC721(\\n        address _localToken,\\n        address _remoteToken,\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes calldata _extraData\\n    ) external;\\n}\\n\\n/**\\n * @title L1ERC721Bridge\\n * @notice The L1 ERC721 bridge is a contract which works together with the L2 ERC721 bridge to\\n *         make it possible to transfer ERC721 tokens from Ethereum to Optimism. This contract\\n *         acts as an escrow for ERC721 tokens deposited into L2.\\n */\\ncontract L1ERC721Bridge is L1ERC721BridgeStorage {\\n\\n    bytes32 internal constant OWNER_KEY =\\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    event SetSemver(uint256 major, uint256 minor, uint256 patch);\\n    event SetL1ERC721Bridge(address messenger, address otherBridge);\\n\\n    /**\\n     * @notice Emitted when an ERC721 bridge to the other network is initiated.\\n     *\\n     * @param localToken  Address of the token on this domain.\\n     * @param remoteToken Address of the token on the remote domain.\\n     * @param from        Address that initiated bridging action.\\n     * @param to          Address to receive the token.\\n     * @param tokenId     ID of the specific token deposited.\\n     * @param extraData   Extra data for use on the client-side.\\n     */\\n    event ERC721BridgeInitiated(\\n        address indexed localToken,\\n        address indexed remoteToken,\\n        address indexed from,\\n        address to,\\n        uint256 tokenId,\\n        bytes extraData\\n    );\\n\\n    /**\\n     * @notice Emitted when an ERC721 bridge from the other network is finalized.\\n     *\\n     * @param localToken  Address of the token on this domain.\\n     * @param remoteToken Address of the token on the remote domain.\\n     * @param from        Address that initiated bridging action.\\n     * @param to          Address to receive the token.\\n     * @param tokenId     ID of the specific token deposited.\\n     * @param extraData   Extra data for use on the client-side.\\n     */\\n    event ERC721BridgeFinalized(\\n        address indexed localToken,\\n        address indexed remoteToken,\\n        address indexed from,\\n        address to,\\n        uint256 tokenId,\\n        bytes extraData\\n    );\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == _owner(), \\\"not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Ensures that the caller is a cross-chain message from the other bridge.\\n     */\\n    modifier onlyOtherBridge() {\\n        require(\\n            msg.sender == address(MESSENGER)\\n                && ICrossDomainMessenger(MESSENGER).xDomainMessageSender() == OTHER_BRIDGE,\\n            \\\"ERC721Bridge: function can only be called from the other bridge\\\"\\n        );\\n        _;\\n    }\\n\\n    function _owner() internal view returns (address) {\\n        address owner_;\\n        assembly {\\n            owner_ := sload(OWNER_KEY)\\n        }\\n        return owner_;\\n    }\\n\\n    function initialize(address _messenger, address _otherBridge) public onlyOwner {\\n        MESSENGER = _messenger;\\n        OTHER_BRIDGE = _otherBridge;\\n    }\\n\\n    function setSemver(\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) external virtual onlyOwner {\\n        emit SetSemver(_major, _minor, _patch);\\n        MAJOR_VERSION = _major;\\n        MINOR_VERSION = _minor;\\n        PATCH_VERSION = _patch;\\n    }\\n\\n    /**\\n     * @custom:legacy\\n     * @notice Legacy getter for messenger contract.\\n     *\\n     * @return Messenger contract on this domain.\\n     */\\n    function messenger() external view returns (address) {\\n        return MESSENGER;\\n    }\\n\\n    /**\\n     * @custom:legacy\\n     * @notice Legacy getter for other bridge address.\\n     *\\n     * @return Address of the bridge on the other network.\\n     */\\n    function otherBridge() external view returns (address) {\\n        return OTHER_BRIDGE;\\n    }\\n\\n    /**\\n     * @notice Initiates a bridge of an NFT to the caller's account on the other chain. Note that\\n     *         this function can only be called by EOAs. Smart contract wallets should use the\\n     *         `bridgeERC721To` function after ensuring that the recipient address on the remote\\n     *         chain exists. Also note that the current owner of the token on this chain must\\n     *         approve this contract to operate the NFT before it can be bridged.\\n     *         **WARNING**: Do not bridge an ERC721 that was originally deployed on Optimism. This\\n     *         bridge only supports ERC721s originally deployed on Ethereum. Users will need to\\n     *         wait for the one-week challenge period to elapse before their Optimism-native NFT\\n     *         can be refunded on L2.\\n     *\\n     * @param _localToken  Address of the ERC721 on this domain.\\n     * @param _remoteToken Address of the ERC721 on the remote domain.\\n     * @param _tokenId     Token ID to bridge.\\n     * @param _minGasLimit Minimum gas limit for the bridge message on the other domain.\\n     * @param _extraData   Optional data to forward to the other chain. Data supplied here will not\\n     *                     be used to execute any code on the other chain and is only emitted as\\n     *                     extra data for the convenience of off-chain tooling.\\n     */\\n    function bridgeERC721(\\n        address _localToken,\\n        address _remoteToken,\\n        uint256 _tokenId,\\n        uint32 _minGasLimit,\\n        bytes calldata _extraData\\n    ) external {\\n        // Modifier requiring sender to be EOA. This prevents against a user error that would occur\\n        // if the sender is a smart contract wallet that has a different address on the remote chain\\n        // (or doesn't have an address on the remote chain at all). The user would fail to receive\\n        // the NFT if they use this function because it sends the NFT to the same address as the\\n        // caller. This check could be bypassed by a malicious contract via initcode, but it takes\\n        // care of the user error we want to avoid.\\n        require(!Address.isContract(msg.sender), \\\"ERC721Bridge: account is not externally owned\\\");\\n\\n        _initiateBridgeERC721(\\n            _localToken,\\n            _remoteToken,\\n            msg.sender,\\n            msg.sender,\\n            _tokenId,\\n            _minGasLimit,\\n            _extraData\\n        );\\n    }\\n    /**\\n     * @notice Initiates a bridge of an NFT to some recipient's account on the other chain. Note\\n     *         that the current owner of the token on this chain must approve this contract to\\n     *         operate the NFT before it can be bridged.\\n     *         **WARNING**: Do not bridge an ERC721 that was originally deployed on Optimism. This\\n     *         bridge only supports ERC721s originally deployed on Ethereum. Users will need to\\n     *         wait for the one-week challenge period to elapse before their Optimism-native NFT\\n     *         can be refunded on L2.\\n     *\\n     * @param _localToken  Address of the ERC721 on this domain.\\n     * @param _remoteToken Address of the ERC721 on the remote domain.\\n     * @param _to          Address to receive the token on the other domain.\\n     * @param _tokenId     Token ID to bridge.\\n     * @param _minGasLimit Minimum gas limit for the bridge message on the other domain.\\n     * @param _extraData   Optional data to forward to the other chain. Data supplied here will not\\n     *                     be used to execute any code on the other chain and is only emitted as\\n     *                     extra data for the convenience of off-chain tooling.\\n     */\\n    function bridgeERC721To(\\n        address _localToken,\\n        address _remoteToken,\\n        address _to,\\n        uint256 _tokenId,\\n        uint32 _minGasLimit,\\n        bytes calldata _extraData\\n    ) external {\\n        require(_to != address(0), \\\"ERC721Bridge: nft recipient cannot be address(0)\\\");\\n\\n        _initiateBridgeERC721(\\n            _localToken,\\n            _remoteToken,\\n            msg.sender,\\n            _to,\\n            _tokenId,\\n            _minGasLimit,\\n            _extraData\\n        );\\n    }\\n\\n    /**\\n     * @notice Completes an ERC721 bridge from the other domain and sends the ERC721 token to the\\n     *         recipient on this domain.\\n     *\\n     * @param _localToken  Address of the ERC721 token on this domain.\\n     * @param _remoteToken Address of the ERC721 token on the other domain.\\n     * @param _from        Address that triggered the bridge on the other domain.\\n     * @param _to          Address to receive the token on this domain.\\n     * @param _tokenId     ID of the token being deposited.\\n     * @param _extraData   Optional data to forward to L1. Data supplied here will not be used to\\n     *                     execute any code on L1 and is only emitted as extra data for the\\n     *                     convenience of off-chain tooling.\\n     */\\n    function finalizeBridgeERC721(\\n        address _localToken,\\n        address _remoteToken,\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes calldata _extraData\\n    ) external onlyOtherBridge {\\n        require(_localToken != address(this), \\\"L2ERC721Bridge: local token cannot be self\\\");\\n\\n        // Note that supportsInterface makes a callback to the _localToken address which is user\\n        // provided.\\n        require(\\n            ERC165Checker.supportsInterface(_localToken, type(IOptimismMintableERC721).interfaceId),\\n            \\\"L1ERC721Bridge: local token interface is not compliant\\\"\\n        );\\n\\n        require(\\n            _remoteToken == IOptimismMintableERC721(_localToken).remoteToken(),\\n            \\\"L2ERC721Bridge: wrong remote token for Optimism Mintable ERC721 local token\\\"\\n        );\\n\\n        // When a deposit is finalized, we give the NFT with the same tokenId to the account\\n        // on L2. Note that safeMint makes a callback to the _to address which is user provided.\\n        IOptimismMintableERC721(_localToken).safeMint(_to, _tokenId);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit ERC721BridgeFinalized(_localToken, _remoteToken, _from, _to, _tokenId, _extraData);\\n    }\\n\\n    function _initiateBridgeERC721(\\n        address _localToken,\\n        address _remoteToken,\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        uint32 _minGasLimit,\\n        bytes calldata _extraData\\n    ) internal {\\n        require(_remoteToken != address(0), \\\"L1ERC721Bridge: remote token cannot be address(0)\\\");\\n\\n        // Check that the withdrawal is being initiated by the NFT owner\\n        require(\\n            _from == IOptimismMintableERC721(_localToken).ownerOf(_tokenId),\\n            \\\"L1ERC721Bridge: Withdrawal is not being initiated by NFT owner\\\"\\n        );\\n\\n        // Construct calldata for l1ERC721Bridge.finalizeBridgeERC721(_to, _tokenId)\\n        // slither-disable-next-line reentrancy-events\\n        address remoteToken = IOptimismMintableERC721(_localToken).remoteToken();\\n        require(\\n            remoteToken == _remoteToken,\\n            \\\"L1ERC721Bridge: remote token does not match given value\\\"\\n        );\\n\\n        // When a withdrawal is initiated, we burn the withdrawer's NFT to prevent subsequent L2\\n        // usage\\n        // slither-disable-next-line reentrancy-events\\n        IOptimismMintableERC721(_localToken).burn(_from, _tokenId);\\n\\n        bytes memory message = abi.encodeWithSelector(\\n            IL2ERC721Bridge.finalizeBridgeERC721.selector,\\n            remoteToken,\\n            _localToken,\\n            _from,\\n            _to,\\n            _tokenId,\\n            _extraData\\n        );\\n\\n        // Send message to L1 bridge\\n        // slither-disable-next-line reentrancy-events\\n        ICrossDomainMessenger(MESSENGER).sendMessage(OTHER_BRIDGE, message, _minGasLimit);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit ERC721BridgeInitiated(_localToken, remoteToken, _from, _to, _tokenId, _extraData);\\n    }\\n\\n}\",\"keccak256\":\"0x361f400d58c47634d7f02222bc871880f3c063d877eb913c8ccd3bd37181dbaf\",\"license\":\"MIT\"},\"contracts/L1/L1ERC721BridgeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ncontract L1ERC721BridgeStorage {\\n\\n    /**\\n     * @notice Messenger contract on this domain. (CrossDomainMessenger)\\n     */\\n    address public MESSENGER;\\n\\n    /**\\n     * @notice Address of the bridge on the other network.\\n     */\\n    address public OTHER_BRIDGE;\\n\\n    /**\\n     * @notice Reserve extra slots (to a total of 50) in the storage layout for future upgrades.\\n     */\\n    uint256[49] public __gap;\\n\\n    /**\\n     * @notice Contract version number (major).\\n     */\\n    uint256 public MAJOR_VERSION;\\n\\n    /**\\n     * @notice Contract version number (minor).\\n     */\\n    uint256 public MINOR_VERSION;\\n\\n    /**\\n     * @notice Contract version number (patch).\\n     */\\n    uint256 public PATCH_VERSION;\\n\\n}\",\"keccak256\":\"0x6647322422fb400cbfc7d1029a47af2fb031d35b6e16c3984997318a7bd11a76\",\"license\":\"MIT\"},\"contracts/universal/IOptimismMintableERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {\\n    IERC721Enumerable\\n} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @title IOptimismMintableERC721\\n * @notice Interface for contracts that are compatible with the OptimismMintableERC721 standard.\\n *         Tokens that follow this standard can be easily transferred across the ERC721 bridge.\\n */\\ninterface IOptimismMintableERC721 is IERC721Enumerable {\\n    /**\\n     * @notice Emitted when a token is minted.\\n     *\\n     * @param account Address of the account the token was minted to.\\n     * @param tokenId Token ID of the minted token.\\n     */\\n    event Mint(address indexed account, uint256 tokenId);\\n\\n    /**\\n     * @notice Emitted when a token is burned.\\n     *\\n     * @param account Address of the account the token was burned from.\\n     * @param tokenId Token ID of the burned token.\\n     */\\n    event Burn(address indexed account, uint256 tokenId);\\n\\n    /**\\n     * @notice Mints some token ID for a user, checking first that contract recipients\\n     *         are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * @param _to      Address of the user to mint the token for.\\n     * @param _tokenId Token ID to mint.\\n     */\\n    function safeMint(address _to, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Burns a token ID from a user.\\n     *\\n     * @param _from    Address of the user to burn the token from.\\n     * @param _tokenId Token ID to burn.\\n     */\\n    function burn(address _from, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Chain ID of the chain where the remote token is deployed.\\n     */\\n    function REMOTE_CHAIN_ID() external view returns (uint256);\\n\\n    /**\\n     * @notice Address of the token on the remote domain.\\n     */\\n    function REMOTE_TOKEN() external view returns (address);\\n\\n    /**\\n     * @notice Address of the ERC721 bridge on this network.\\n     */\\n    function BRIDGE() external view returns (address);\\n\\n    /**\\n     * @notice Chain ID of the chain where the remote token is deployed.\\n     */\\n    function remoteChainId() external view returns (uint256);\\n\\n    /**\\n     * @notice Address of the token on the remote domain.\\n     */\\n    function remoteToken() external view returns (address);\\n\\n    /**\\n     * @notice Address of the ERC721 bridge on this network.\\n     */\\n    function bridge() external view returns (address);\\n}\",\"keccak256\":\"0x38a7082080e46a0e8fb70a6621d2cea87fd60aa7750dbb1878beaa46b27e2b3c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "ERC721BridgeFinalized(address,address,address,address,uint256,bytes)": {
        "params": {
          "extraData": "Extra data for use on the client-side.",
          "from": "Address that initiated bridging action.",
          "localToken": "Address of the token on this domain.",
          "remoteToken": "Address of the token on the remote domain.",
          "to": "Address to receive the token.",
          "tokenId": "ID of the specific token deposited."
        }
      },
      "ERC721BridgeInitiated(address,address,address,address,uint256,bytes)": {
        "params": {
          "extraData": "Extra data for use on the client-side.",
          "from": "Address that initiated bridging action.",
          "localToken": "Address of the token on this domain.",
          "remoteToken": "Address of the token on the remote domain.",
          "to": "Address to receive the token.",
          "tokenId": "ID of the specific token deposited."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "bridgeERC721(address,address,uint256,uint32,bytes)": {
        "params": {
          "_extraData": "Optional data to forward to the other chain. Data supplied here will not                     be used to execute any code on the other chain and is only emitted as                     extra data for the convenience of off-chain tooling.",
          "_localToken": "Address of the ERC721 on this domain.",
          "_minGasLimit": "Minimum gas limit for the bridge message on the other domain.",
          "_remoteToken": "Address of the ERC721 on the remote domain.",
          "_tokenId": "Token ID to bridge."
        }
      },
      "bridgeERC721To(address,address,address,uint256,uint32,bytes)": {
        "params": {
          "_extraData": "Optional data to forward to the other chain. Data supplied here will not                     be used to execute any code on the other chain and is only emitted as                     extra data for the convenience of off-chain tooling.",
          "_localToken": "Address of the ERC721 on this domain.",
          "_minGasLimit": "Minimum gas limit for the bridge message on the other domain.",
          "_remoteToken": "Address of the ERC721 on the remote domain.",
          "_to": "Address to receive the token on the other domain.",
          "_tokenId": "Token ID to bridge."
        }
      },
      "finalizeBridgeERC721(address,address,address,address,uint256,bytes)": {
        "params": {
          "_extraData": "Optional data to forward to L1. Data supplied here will not be used to                     execute any code on L1 and is only emitted as extra data for the                     convenience of off-chain tooling.",
          "_from": "Address that triggered the bridge on the other domain.",
          "_localToken": "Address of the ERC721 token on this domain.",
          "_remoteToken": "Address of the ERC721 token on the other domain.",
          "_to": "Address to receive the token on this domain.",
          "_tokenId": "ID of the token being deposited."
        }
      },
      "messenger()": {
        "custom:legacy": "@notice Legacy getter for messenger contract.",
        "returns": {
          "_0": "Messenger contract on this domain."
        }
      },
      "otherBridge()": {
        "custom:legacy": "@notice Legacy getter for other bridge address.",
        "returns": {
          "_0": "Address of the bridge on the other network."
        }
      }
    },
    "title": "L1ERC721Bridge",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ERC721BridgeFinalized(address,address,address,address,uint256,bytes)": {
        "notice": "Emitted when an ERC721 bridge from the other network is finalized."
      },
      "ERC721BridgeInitiated(address,address,address,address,uint256,bytes)": {
        "notice": "Emitted when an ERC721 bridge to the other network is initiated."
      }
    },
    "kind": "user",
    "methods": {
      "MAJOR_VERSION()": {
        "notice": "Contract version number (major)."
      },
      "MESSENGER()": {
        "notice": "Messenger contract on this domain. (CrossDomainMessenger)"
      },
      "MINOR_VERSION()": {
        "notice": "Contract version number (minor)."
      },
      "OTHER_BRIDGE()": {
        "notice": "Address of the bridge on the other network."
      },
      "PATCH_VERSION()": {
        "notice": "Contract version number (patch)."
      },
      "__gap(uint256)": {
        "notice": "Reserve extra slots (to a total of 50) in the storage layout for future upgrades."
      },
      "bridgeERC721(address,address,uint256,uint32,bytes)": {
        "notice": "Initiates a bridge of an NFT to the caller's account on the other chain. Note that         this function can only be called by EOAs. Smart contract wallets should use the         `bridgeERC721To` function after ensuring that the recipient address on the remote         chain exists. Also note that the current owner of the token on this chain must         approve this contract to operate the NFT before it can be bridged.         **WARNING**: Do not bridge an ERC721 that was originally deployed on Optimism. This         bridge only supports ERC721s originally deployed on Ethereum. Users will need to         wait for the one-week challenge period to elapse before their Optimism-native NFT         can be refunded on L2."
      },
      "bridgeERC721To(address,address,address,uint256,uint32,bytes)": {
        "notice": "Initiates a bridge of an NFT to some recipient's account on the other chain. Note         that the current owner of the token on this chain must approve this contract to         operate the NFT before it can be bridged.         **WARNING**: Do not bridge an ERC721 that was originally deployed on Optimism. This         bridge only supports ERC721s originally deployed on Ethereum. Users will need to         wait for the one-week challenge period to elapse before their Optimism-native NFT         can be refunded on L2."
      },
      "finalizeBridgeERC721(address,address,address,address,uint256,bytes)": {
        "notice": "Completes an ERC721 bridge from the other domain and sends the ERC721 token to the         recipient on this domain."
      }
    },
    "notice": "The L1 ERC721 bridge is a contract which works together with the L2 ERC721 bridge to         make it possible to transfer ERC721 tokens from Ethereum to Optimism. This contract         acts as an escrow for ERC721 tokens deposited into L2.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1135,
        "contract": "contracts/L1/L1ERC721Bridge.sol:L1ERC721Bridge",
        "label": "MESSENGER",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1138,
        "contract": "contracts/L1/L1ERC721Bridge.sol:L1ERC721Bridge",
        "label": "OTHER_BRIDGE",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1143,
        "contract": "contracts/L1/L1ERC721Bridge.sol:L1ERC721Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1146,
        "contract": "contracts/L1/L1ERC721Bridge.sol:L1ERC721Bridge",
        "label": "MAJOR_VERSION",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 1149,
        "contract": "contracts/L1/L1ERC721Bridge.sol:L1ERC721Bridge",
        "label": "MINOR_VERSION",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 1152,
        "contract": "contracts/L1/L1ERC721Bridge.sol:L1ERC721Bridge",
        "label": "PATCH_VERSION",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}