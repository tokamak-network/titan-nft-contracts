{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/FirstEvent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ninterface IIERC721 {\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function safeTransferFrom(address from, address to, uint256 tokenId) external ;\n\n}\n\ninterface IIERC20 {\n    function allowance(address owner, address spender) external view returns (uint256) ;\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n\ncontract FirstEvent is Ownable, IERC721Receiver{\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 public constant _ERC721_RECEIVED = 0x150b7a02;\n\n    address public nftAddress;\n    address public recipient;\n    address public priceToken;\n    uint256 public priceAmount;\n    bool internal _lock;\n\n    event ChangedAddress(address _nftAddress, address _recipient);\n    event ChangedPrice(address token, uint256 amount) ;\n    event GiveFree(uint256 tokenId, address to) ;\n    event MultiGiveFree(uint256[] tokenIds, address to) ;\n    event Purchased(address buyer, uint256 tokenId, address token, uint256 amount, address receipt) ;\n    event MultiPurchased(address buyer, uint256[] tokenIds, address token, uint256 amount, address receipt) ;\n    event Registerd(address operator, address from, uint256 tokenId, bytes data) ;\n\n    modifier ifFree {\n        require(_lock != true, \"in use\");\n        _lock = true;\n        _;\n        _lock = false;\n    }\n\n    modifier nonZeroAddress(address addr) {\n        require(addr != address(0), \"zero address\");\n        _;\n    }\n\n    modifier nonZero(uint256 value) {\n        require(value != 0, \"zero value\");\n        _;\n    }\n\n    constructor () {\n    }\n\n    /**** only Owner ****/\n\n    function setAddress(address _nftAddress, address _recipient)\n        external onlyOwner ifFree\n    {\n        require(nftAddress != _nftAddress || recipient != _recipient, \"same address\");\n        nftAddress = _nftAddress;\n        recipient = _recipient;\n\n        emit ChangedAddress(_nftAddress, _recipient);\n    }\n\n    function setPrice(address _token, uint256 _amount)\n        external onlyOwner ifFree\n    {\n        require(priceToken != _token || priceAmount != _amount, \"same address\");\n        priceToken = _token;\n        priceAmount = _amount;\n\n        emit ChangedPrice(_token, _amount);\n    }\n\n\n    function giveFree(uint256 tokenId, address to)\n        external onlyOwner ifFree nonZeroAddress(to) nonZeroAddress(nftAddress)\n    {\n        require(IIERC721(nftAddress).ownerOf(tokenId) == address(this), \"it' not mine\");\n        require(to != address(this), \"it' me\");\n        IIERC721(nftAddress).safeTransferFrom(address(this), to, tokenId);\n        emit GiveFree(tokenId, to) ;\n    }\n\n    function multiGiveFree(uint256[] memory tokenIds, address to)\n        external onlyOwner ifFree nonZeroAddress(to) nonZeroAddress(nftAddress)\n    {\n        require(tokenIds.length != 0, \"nothing\");\n        require(to != address(this), \"it' me\");\n        for(uint256 i=0; i< tokenIds.length; i++){\n            require(IIERC721(nftAddress).ownerOf(tokenIds[i]) == address(this), \"it' not mine\");\n            IIERC721(nftAddress).safeTransferFrom(address(this), to, tokenIds[i]);\n        }\n        emit MultiGiveFree(tokenIds, to) ;\n    }\n\n    /**** external ****/\n\n    function purchase(uint256 tokenId)\n        external ifFree nonZeroAddress(priceToken) nonZeroAddress(recipient) nonZero(priceAmount)\n    {\n        require(IIERC721(nftAddress).ownerOf(tokenId) == address(this), \"it' not mine\");\n        require(IIERC20(priceToken).allowance(msg.sender, address(this)) >= priceAmount,\n            \"token approval amount is insufficient\");\n        require(IIERC20(priceToken).transferFrom(msg.sender, recipient, priceAmount), \"payment failure\");\n\n        IIERC721(nftAddress).safeTransferFrom(address(this), msg.sender, tokenId);\n        emit Purchased(msg.sender, tokenId, priceToken, priceAmount, recipient) ;\n    }\n\n\n    function multiPurchase(uint256[] memory tokenIds)\n        external ifFree nonZeroAddress(priceToken) nonZeroAddress(recipient) nonZero(priceAmount)\n    {\n        require(tokenIds.length != 0, \"nothing\");\n        uint256 len = tokenIds.length;\n        uint256 amount = priceAmount * len;\n        require(IIERC20(priceToken).allowance(msg.sender, address(this)) >= amount,\n            \"token approval amount is insufficient\");\n\n        for (uint256 i = 0; i < len; i++) {\n            require(IIERC721(nftAddress).ownerOf(tokenIds[i]) == address(this), \"it' not mine\");\n        }\n\n        require(IIERC20(priceToken).transferFrom(msg.sender, recipient, amount), \"payment failure\");\n\n        for (uint256 j = 0; j < len; j++) {\n            IIERC721(nftAddress).safeTransferFrom(address(this), msg.sender, tokenIds[j]);\n        }\n\n        emit MultiPurchased(msg.sender, tokenIds, priceToken, priceAmount, recipient) ;\n    }\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external override returns (bytes4) {\n\n        emit Registerd(operator, from, tokenId, data);\n\n        return _ERC721_RECEIVED;\n    }\n\n    /**** public ****/\n\n    /**** view ****/\n\n    /**** internal ****/\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 625
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}